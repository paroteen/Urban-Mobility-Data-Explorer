Summative - Urban Mobility Data Explorer
Due 16 Oct by 23:59 Points 40 Submitting a website url or a file upload File types zip and pdf Available after 26 Sep at 23:59
Assignment Overview
In this summative assignment, you will demonstrate your ability to design and develop an enterprise-level fullstack application using real-world urban mobility datasets. You will work with raw data from the New York City Taxi Trip dataset, which contains trip records including timestamps, distances, durations, pickup/dropoff locations, and other metadata.

Your task is to:

Clean and process the raw dataset

Store the processed data in a well-designed relational database

Build a backend service to query the data

Create a frontend dashboard that allows users to explore urban mobility patterns and draw meaningful insights

This assignment is designed to challenge your technical skills and your ability to think creatively and critically about real-world data. You are encouraged to explore the data deeply and communicate your findings effectively through your application.

Learning Objectives
By completing this assignment, you will:

Apply data preprocessing techniques to make sense of messy real-world data

Design and implement a normalized relational database schema

Develop a backend API to serve data efficiently

Build an interactive, responsive frontend application

Present analytical insights using meaningful and relevant visualizations

Demonstrate full-cycle system design, engineering, and problem-solving skills

Dataset
You must use the official  train.zip Download train.zip New York City Taxi Trip DatasetLinks to an external site.. This dataset includes:

Pickup and drop-off timestamps

Pickup and drop-off coordinates

Trip duration and distance

Fare amount and tip

Passenger and payment metadata

You must use a raw trip-level dataset, not pre-cleaned or aggregated versions. All data processing must be part of your own pipeline.

Assignment Tasks
1. Data Processing and Cleaning (Backend)
Load the raw NYC dataset (CSV)

Handle missing values, duplicates, invalid records, and outliers

Normalize and format timestamps, coordinates, and numeric fields

Define and justify at least three derived features (e.g., trip speed, idle time, fare per km)

Log excluded or suspicious records for transparency

You may use Flask or Node.js for your backend.

2. Database Design and Implementation
Design a normalized relational schema with appropriate indexing

Implement the database in PostgreSQL, SQLite, or MySQL

Write scripts to insert cleaned and enriched data into the database

Ensure data integrity and enable efficient queries

3. Frontend Dashboard Development
Build a web-based dashboard using HTML, CSS, and JavaScript

Include filtering and sorting options (e.g., by time, distance, location, fare)

Enable dynamic interaction with the data (e.g., visual summaries, detail views)

You are not told what to visualize. It is your responsibility to explore the dataset and decide what is insightful or useful. Original, well-justified visualization choices will be rewarded.

Deliverables
Codebase (.zip) and GitHub link:

All backend and frontend code

Clean project structure and README file with setup instructions

Link to your video walkthrough in the README

Database dump or schema files

PDF documentation report (see below)

Video walkthrough (5 minutes)

Overview of your system

Technical descriptions(architecture designs)
Explanation of your architecture and choices

Demonstration of working features

Your README file must be fully runnable without additional support. It should include installation steps, environment setup, and how to launch both the backend and frontend.

Deployment is not required but will be rewarded under the ‘Product Quality & Storytelling’ section if done properly.
Submissions without a video, documentation or readme file will receive a grade of zero.

Documentation Guidelines (2–3 Pages)
Each team must submit a technical report that reflects your design thinking and engineering decisions. The report must include:

1. Problem Framing and Dataset Analysis
Describe the dataset and its context

Identify data challenges (e.g., missing fields, outliers, anomalies)

Explain assumptions made during data cleaning

Highlight one unexpected observation that influenced your design

2. System Architecture and Design Decisions
Include a system architecture diagram (frontend, backend, database)

Justify your stack choices and schema structure

Discuss trade-offs you made during the design process

3. Algorithmic Logic and Data Structures
You are required to manually implement at least one algorithm or data structure as part of your system — without relying on built-in libraries or prewritten logic.

This should address a real problem in your dataset or application (e.g., filtering, ranking, grouping, anomaly detection, etc.).

Your implementation must include:

Custom code (no use of libraries like heapq, Counter, sort_values, etc.)

A brief explanation of your approach

Pseudo-code and time/space complexity analysis

The goal is to assess your understanding of algorithmic thinking in the context of real-world data — not your ability to call built-in functions.

4. Insights and Interpretation
Present three meaningful insights derived from the data. For each:

Show how you derived it (via query, algorithm, or visualization)

Include a visual (e.g., chart or screenshot)

Interpret what it means in the context of urban mobility

5. Reflection and Future Work
Reflect on technical and team challenges

Suggest improvements and next steps if this were a real-world product

Academic Integrity and AI Usage
You may only use AI tools to help write your README file.

Using AI to generate or assist with code, documentation, or insights is strictly prohibited. All submitted work must be your own original work.

Copying or adapting AI-generated code will result in a grade of zero.

Submissions with generic or AI-generated content in the report will be penalized.

Your documentation must reflect your team’s actual thinking and decision-making.

Violations will be treated as academic misconduct in line with institutional policy.

Submission Notes
Your GitHub repo must include meaningful commit history

All code must run successfully. Submissions that do not execute will receive a grade of zero

Submissions without a video walkthrough will not be graded

Your documentation must reflect your original thinking. Generic or AI-generated filler will lead to reduced marks or penalties.

Before submitting, please verify that all links are working and accessible. Any broken or inaccessible links will not be graded.
Final Note
This assignment is an opportunity to show how you think, how you solve problems, and how well you can build systems that explain the complexity of the world around us. Don’t just build a tool, tell a story about how cities move. You will be randomly called upon to individually explain your team's project- failure to do so will result in  a zero. Adding readme files and other contributions of this nature does not constitute a meaningful contribution and will be checked. Individual team members will be called upon randomly to explain their work and failure to do so will result in a zero and academic consequences where applicable. Meaningful contribution excludes documentations(readme file, presentation slides and pdfs) only codes. 

Rubric
Rubric
Rubric
Criteria	Ratings	Pts
This criterion is linked to a learning outcomeBackend Logic & Data Handling
Quality of data cleaning, feature engineering, and backend implementation. Includes proper handling of outliers, missing data, and clean scripts or APIs.
5 to >3.0 Pts
Excellent
Cleaned data thoroughly; handled missing values and edge cases accurately; implemented robust backend logic; meaningful derived features computed and justified
3 to >2.0 Pts
Good
Mostly clean data; some backend logic works; basic feature generation present; some assumptions unaddressed
2 to >1.0 Pts
Satisfactory
Minimal cleaning or repetitive logic; derived features unclear or missing; backend incomplete or partially broken
1 to >0 Pts
No Marks
No data cleaning or broken backend; no feature generation
5 pts
This criterion is linked to a learning outcomeSystem Architecture & Database Design
Architecture diagram, DB design, table design, indexing
5 to >3.0 Pts
Excellent
Clear, justified system architecture; normalized schema with relationships and indexing; good separation of concerns
3 to >2.0 Pts
Good
Architecture diagram present but limited; schema mostly normalized; minor flaws in table or relationship design
2 to >0.0 Pts
Satisfactory
Basic or unclear architecture; flat schema or no relationships; no indexing
0 Pts
No Marks
No diagram or flawed schema; poor database use or none submitted
5 pts
This criterion is linked to a learning outcomeFrontend UI & Insight Presentation
Interactivity, charts/visuals, clarity of user experience
5 to >3.0 Pts
Excellent
Interactive and polished UI; thoughtful data visualizations; insights clearly communicated
3 to >2.0 Pts
Good
Functional dashboard with some filters or visuals; insights are basic but visible
2 to >0.0 Pts
Satisfactory
Minimal frontend; visuals lack clarity; weak user experience or unhelpful charts
0 Pts
No Marks
No frontend or unusable interface
5 pts
This criterion is linked to a learning outcomeAlgorithm / DSA Implementation
Custom implementation of algorithm/data structure
5 to >3.0 Pts
Excellent
Manual implementation of a valid algorithm; explained with pseudo-code and complexity
3 to >2.0 Pts
Good
Attempted a basic implementation (e.g., simple sort, map); explanation may lack clarity
2 to >0.0 Pts
Satisfactory
Minimal or flawed attempt; unclear or copied structure
0 Pts
No Marks
Used built-in functions only or nothing submitted
5 pts
This criterion is linked to a learning outcomeCode Quality & README File
Code structure and clarity of README instructions
5 to >3.0 Pts
Excellent
Code is modular, well-documented, and easy to follow. README is complete and reproducible.
3 to >2.0 Pts
Good
Code is mostly clear. README mostly works with minor gaps.
2 to >0.0 Pts
Satisfactory
Code is messy or disorganized. README is vague or incomplete.
0 Pts
No Marks
Code or README missing. Instructions don’t work.
5 pts
This criterion is linked to a learning outcomeVideo Walkthrough
Demo, system explanation, clarity
5 to >3.0 Pts
Excellent
Clear 5-minute walkthrough showing UI, architecture, and technical explanation
3 to >2.0 Pts
Good
Covers most key areas but lacks depth or polish
2 to >0.0 Pts
Satisfactory
Basic UI tour only; poor explanation or missing architecture
0 Pts
No Marks
No video submitted or link broken
5 pts
This criterion is linked to a learning outcomeProduct Quality & Storytelling
Visual polish, storytelling, polish, real-world awareness.
5 to >3.0 Pts
Excellent
Clear real-world story or mobility challenge communicated; thoughtful design; possible clustering, deployment
3 to >2.0 Pts
Good
Some effort to communicate value or user experience; some polish in presentation
2 to >0.0 Pts
Satisfactory
Basic presentation of data without deeper story; visuals lack consistency or cohesion
0 Pts
No Marks
No attempt to communicate insights beyond raw charts
5 pts
This criterion is linked to a learning outcomeDocumentation
Technical report with reasoning, insights, and reflection
5 to >3.0 Pts
Excellent
Clear, reflective, and detailed report with justified decisions, architecture, insights, and challenges.
3 to >2.0 Pts
Good
Report includes major sections but lacks clarity or depth.
2 to >0.0 Pts
Satisfactory
Report is vague, rushed, or incomplete.
0 Pts
No Marks
No report.
5 pts
Total points: 40